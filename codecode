import pygame as pg
import random, time, sys
from pygame.locals import *

fps = 25
window_w, window_h = 600, 500
block, rect_h, rect_w = 20, 20, 10

side_freq, down_freq = 0.15, 0.1  #передвижение в сторону и вниз

side_margin = int((window_w - rect_w * block) / 2)
top_margin = window_h - (rect_h * block) - 5
           # синий        зеленый      красный      желтый        фиалетовый     голубой
colors = ((0, 0, 225), (0, 225, 0), (225, 0, 0), (225, 225, 0), (255, 0, 255), (51, 204, 255))  #цвета, которые будут использоватья в ходе игры
colors3d = ((0, 51, 255), (0, 255, 51), (255, 0, 51), (255, 255, 51), (255, 51, 255), (51, 255, 255))  #цвета для создания 3D эффекта

white, gray, black = (255, 255, 255), (185, 185, 185), (0, 0, 0)
brd_color, bg_color, txt_color, title_color = white, black, white, colors[3]

figur_w, figur_h = 5, 5
empty = 'o'

figures = {'S': [['ooooo',
                  'ooooo',
                  'ooxxo',
                  'oxxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxxo',
                  'oooxo',
                  'ooooo']],
           'Z': [['ooooo',
                  'ooooo',
                  'oxxoo',
                  'ooxxo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'oxxoo',
                  'oxooo',
                  'ooooo']],
           'J': [['ooooo',
                  'oxooo',
                  'oxxxo',
                  'ooooo',
                  'ooooo'],
                 ['ooooo',
                  'ooxxo',
                  'ooxoo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'oxxxo',
                  'oooxo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxoo',
                  'oxxoo',
                  'ooooo']],
           'L': [['ooooo',
                  'oooxo',
                  'oxxxo',
                  'ooooo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxoo',
                  'ooxxo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'oxxxo',
                  'oxooo',
                  'ooooo'],
                 ['ooooo',
                  'oxxoo',
                  'ooxoo',
                  'ooxoo',
                  'ooooo']],
           'I': [['ooxoo',
                  'ooxoo',
                  'ooxoo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'xxxxo',
                  'ooooo',
                  'ooooo']],
           'O': [['ooooo',
                  'ooooo',
                  'oxxoo',
                  'oxxoo',
                  'ooooo']],
           'T': [['ooooo',
                  'ooxoo',
                  'oxxxo',
                  'ooooo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'ooxxo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooooo',
                  'oxxxo',
                  'ooxoo',
                  'ooooo'],
                 ['ooooo',
                  'ooxoo',
                  'oxxoo',
                  'ooxoo',
                  'ooooo']]}


def pauseScreen():
    pause = pg.Surface((600, 500), pg.SRCALPHA)
    pause.fill((0, 0, 255, 127))
    display_surf.blit(pause, (0, 0))


def object_txt(text, font, color):
    surf = font.render(text, True, color)
    return surf, surf.get_rect()


def game_stop():
    pg.quit()
    sys.exit()


def checkKeys():
    quitGame()

    for event in pg.event.get([KEYDOWN, KEYUP]):
        if event.type == KEYDOWN:
            continue
        return event.key
    return None


def showText(text):
    titleSurf, titleRect = object_txt(text, big_font, title_color)
    titleRect.center = (int(window_w / 2) - 3, int(window_h / 2) - 3)
    display_surf.blit(titleSurf, titleRect)

    pressKeySurf, pressKeyRect = object_txt('Для продолжения нажмите любую клавишу', basic_font, title_color)
    pressKeyRect.center = (int(window_w / 2), int(window_h / 2) + 100)
    display_surf.blit(pressKeySurf, pressKeyRect)

    while checkKeys() == None:
        pg.display.update()
        fps_clock.tick()


#проверка событий, приводящих к выходу из игры
def quitGame():
    for _ in pg.event.get(QUIT):
        game_stop()
    for event in pg.event.get(KEYUP):
        if event.key == K_ESCAPE:
            game_stop()
        pg.event.post(event)


def calcSpeed(points):
    #вычисление уровня
    level = int(points / 10) + 1
    fall_speed = 0.27 - (level * 0.02)
    return level, fall_speed


def new_figur():
    #возвращает новую фигуру со случайным цветом и углом поворота
    shape = random.choice(list(figures.keys()))
    newFigure = {'shape': shape,
                 'rotation': random.randint(0, len(figures[shape]) - 1),
                 'x': int(rect_w / 2) - int(figur_w / 2),
                 'y': -2,
                 'color': random.randint(0, len(colors) - 1)}
    return newFigure


def addToCup(rect, fig):
    for x in range(figur_w):
        for y in range(figur_h):
            if figures[fig['shape']][fig['rotation']][y][x] != empty:
                rect[x + fig['x']][y + fig['y']] = fig['color']

def emptyfield():
    #создает пустой прямоугольник(игровое поле)
    rect = []
    for i in range(rect_w):
        rect.append([empty] * rect_h)
    return rect


def incup(x, y):
    return x >= 0 and x < rect_w and y < rect_h


def checkPos(rect, fig, adjX=0, adjY=0):
    #проверка, находится ли фигура в границах игрового поля, не сталкиваясь с другими фигурами
    for x in range(figur_w):
        for y in range(figur_h):
            abovecup = y + fig['y'] + adjY < 0
            if abovecup or figures[fig['shape']][fig['rotation']][y][x] == empty:
                continue
            if not incup(x + fig['x'] + adjX, y + fig['y'] + adjY):
                return False
            if rect[x + fig['x'] + adjX][y + fig['y'] + adjY] != empty:
                return False
    return True


def isCompleted(rect, y):
    #проверка наличия полностью заполненных рядов
    for x in range(rect_w):
        if rect[x][y] == empty:
            return False
    return True


def clearCompleted(rect):
    #удаление заполенного ряда и сдвиг верхних рядов вниз
    removed_lines = 0
    y = rect_h - 1
    while y >= 0:
        if isCompleted(rect, y):
            for pushDownY in range(y, 0, -1):
                for x in range(rect_w):
                    rect[x][pushDownY] = rect[x][pushDownY - 1]
            for x in range(rect_w):
                rect[x][0] = empty
            removed_lines += 1
        else:
            y -= 1
    return removed_lines


def convertCoords(block_x, block_y):
    return (side_margin + (block_x * block)), (top_margin + (block_y * block))


def drawBlock(block_x, block_y, color, pxl_x=None, pxl_y=None):
    #отрисовка квадратных блоков, из которых состоят фигуры
    if color == empty:
        return
    if pxl_x == None and pxl_y == None:
        pxl_x, pxl_y = convertCoords(block_x, block_y)
    pg.draw.rect(display_surf, colors[color], (pxl_x + 1, pxl_y + 1, block - 1, block - 1), 0, 3)
    pg.draw.rect(display_surf, colors3d[color], (pxl_x + 1, pxl_y + 1, block - 4, block - 4), 0, 3)
    pg.draw.circle(display_surf, colors[color], (pxl_x + block / 2, pxl_y + block / 2), 5)


def gamecup(rect):
    #граница игрового поля
    pg.draw.rect(display_surf, brd_color, (side_margin - 4, top_margin - 4, (rect_w * block) + 8, (rect_h * block) + 8), 5)

    #фон игрового поля
    pg.draw.rect(display_surf, bg_color, (side_margin, top_margin, block * rect_w, block * rect_h))
    for x in range(rect_w):
        for y in range(rect_h):
            drawBlock(x, y, rect[x][y])


def drawInfo(points, level):
    pointsSurf = basic_font.render(f'Баллы: {points}', True, txt_color)
    pointsRect = pointsSurf.get_rect()
    pointsRect.topleft = (window_w - 590, 180)
    display_surf.blit(pointsSurf, pointsRect)

    levelSurf = basic_font.render(f'Уровень: {level}', True, txt_color)
    levelRect = levelSurf.get_rect()
    levelRect.topleft = (window_w - 590, 250)
    display_surf.blit(levelSurf, levelRect)

    #читыре падсказки для игры нижее
    pausebSurf = basic_font.render('Ускоренное падение:', True, txt_color)
    pausebRect = pausebSurf.get_rect()
    pausebRect.topleft = (window_w - 590, 300)
    display_surf.blit(pausebSurf, pausebRect)

    pausebSurf = basic_font.render('стрелка ввниз', True, txt_color)
    pausebRect = pausebSurf.get_rect()
    pausebRect.topleft = (window_w - 570, 330)
    display_surf.blit(pausebSurf, pausebRect)

    pausebSurf = basic_font.render('Поворот фигуры:', True, txt_color)
    pausebRect = pausebSurf.get_rect()
    pausebRect.topleft = (window_w - 590, 360)
    display_surf.blit(pausebSurf, pausebRect)

    pausebSurf = basic_font.render('стрелка вверх', True, txt_color)
    pausebRect = pausebSurf.get_rect()
    pausebRect.topleft = (window_w - 570, 390)
    display_surf.blit(pausebSurf, pausebRect)

    pausebSurf = basic_font.render('Пауза: пробел', True, txt_color)
    pausebRect = pausebSurf.get_rect()
    pausebRect.topleft = (window_w - 590, 420)
    display_surf.blit(pausebSurf, pausebRect)

    escbSurf = basic_font.render('Выход: Esc', True, txt_color)
    escbRect = escbSurf.get_rect()
    escbRect.topleft = (window_w - 590, 450)
    display_surf.blit(escbSurf, escbRect)


def drawFig(fig, pxl_x=None, pxl_y=None):
    figToDraw = figures[fig['shape']][fig['rotation']]
    if pxl_x == None and pxl_y == None:
        pxl_x, pxl_y = convertCoords(fig['x'], fig['y'])

    #рисование элементов фигур
    for x in range(figur_w):
        for y in range(figur_h):
            if figToDraw[y][x] != empty:
                drawBlock(None, None, fig['color'], pxl_x + (x * block), pxl_y + (y * block))

#место отображения следующей фигуры
def drawnextFig(fig):
    nextSurf = basic_font.render('Следующая:', True, txt_color)
    nextRect = nextSurf.get_rect()
    nextRect.topleft = (window_w - 150, 180)
    display_surf.blit(nextSurf, nextRect)
    drawFig(fig, pxl_x=window_w - 150, pxl_y=230)


def runTetris():
    plfield = emptyfield()
    last_move_down = time.time()
    last_side_move = time.time()
    last_fall = time.time()
    going_down = False
    going_left = False
    going_right = False
    points = 0
    level, fall_speed = calcSpeed(points)
    fall_figur = new_figur()
    next_figur = new_figur()

    while True:
        if fall_figur == None:
            #генерация новой фигуры, если предыдущая уже упала
            fall_figur = next_figur
            next_figur = new_figur()
            last_fall = time.time()

            if not checkPos(plfield, fall_figur):
                return  #если на игровом поле нет свободного места, то игра закончена
        quitGame()
        for event in pg.event.get():
            if event.type == KEYUP:
                if event.key == K_SPACE:
                    pauseScreen()
                    showText('Пауза')
                    last_fall = time.time()
                    last_move_down = time.time()
                    last_side_move = time.time()
                elif event.key == K_LEFT:
                    going_left = False
                elif event.key == K_RIGHT:
                    going_right = False
                elif event.key == K_DOWN:
                    going_down = False

            elif event.type == KEYDOWN:
                #перемещение фигуры влево
                if event.key == K_LEFT and checkPos(plfield, fall_figur, adjX=-1):
                    fall_figur['x'] -= 1
                    going_left = True
                    going_right = False
                    last_side_move = time.time()
                # перемещение фигуры вправо
                elif event.key == K_RIGHT and checkPos(plfield, fall_figur, adjX=1):
                    fall_figur['x'] += 1
                    going_right = True
                    going_left = False
                    last_side_move = time.time()

                #поворачиваем фигуру, если есть место
                elif event.key == K_UP:
                    fall_figur['rotation'] = (fall_figur['rotation'] + 1) % len(figures[fall_figur['shape']])
                    if not checkPos(plfield, fall_figur):
                        fall_figur['rotation'] = (fall_figur['rotation'] - 1) % len(figures[fall_figur['shape']])

                #ускоряем падение фигуры
                elif event.key == K_DOWN:
                    going_down = True
                    if checkPos(plfield, fall_figur, adjY=1):
                        fall_figur['y'] += 1
                    last_move_down = time.time()

        #управление падением фигуры при удержании клавиш
        if (going_left or going_right) and time.time() - last_side_move > side_freq:
            if going_left and checkPos(plfield, fall_figur, adjX=-1):
                fall_figur['x'] -= 1
            elif going_right and checkPos(plfield, fall_figur, adjX=1):
                fall_figur['x'] += 1
            last_side_move = time.time()

        if going_down and time.time() - last_move_down > down_freq and checkPos(plfield, fall_figur, adjY=1):
            fall_figur['y'] += 1
            last_move_down = time.time()

        if time.time() - last_fall > fall_speed:  #свободное падение фигуры
            if not checkPos(plfield, fall_figur, adjY=1):  #проверка "приземления" фигуры
                addToCup(plfield, fall_figur)  #фигура приземлилась, добавляем ее в содержимое игрового поля
                points += clearCompleted(plfield)
                level, fall_speed = calcSpeed(points)
                fall_figur = None
            else:  #продолжаем движение вниз, фигура еще не приземлилась
                fall_figur['y'] += 1
                last_fall = time.time()

        #окно игры со всеми надписями
        display_surf.fill(bg_color)
        gamecup(plfield)
        drawInfo(points, level)
        drawnextFig(next_figur)
        if fall_figur != None:
            drawFig(fall_figur)
        pg.display.update()
        fps_clock.tick(fps)


def main():
    global fps_clock, display_surf, basic_font, big_font
    pg.init()
    fps_clock = pg.time.Clock()
    display_surf = pg.display.set_mode((window_w, window_h))
    basic_font = pg.font.SysFont('Times New Roman', 20)
    big_font = pg.font.SysFont('Times New Roman', 80)
    pg.display.set_caption('Тетрис')
    showText('Тетрис')
    while True:  #начало игры
        runTetris()
        pauseScreen()
        showText('Игра закончена')


if __name__ == '__main__':
    main()
